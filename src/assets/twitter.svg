import React, { useEffect, useRef, useState } from "react";
import { navLinks } from "../constants";
import { Link } from "react-router-dom";
import { SubMenu } from "../component";
import { FaArrowRightLong } from "react-icons/fa6";
import { FaArrowDownLong } from "react-icons/fa6";
import { LogoDark } from "../assets";
import { useTheme } from "../Context/ThemeContext";
import { IoCallOutline } from "react-icons/io5";
import { CiMenuFries } from "react-icons/ci";
import { FiPhone } from "react-icons/fi";
import { IoClose } from "react-icons/io5";
import {
  menu,
  nepalflag,
  close,
  phone,
  arrowRight,
  arrowDown,
  arrowUp,
} from "../assets";

const header = () => {
  const [togglemobile, settogglemobile] = useState(false);
  const [navId, setNavId] = useState("");
  const [scrolled, setScrolled] = useState(false);
  const { handleToggle, theme } = useTheme();

  // const handleMouseEnter = (id) => {
  //   setNavId(id);
  // };

  // const handleMouseLeave = () => {
  //   setNavId(null);
  // };

  const handleClick = (id) => {
    if (navId === id) {
      setNavId(null);
    } else {
      setNavId(id);
    }
  };
  useEffect(() => {
    const handleScroll = () => {
      if (window.scrollY > 20) {
        setScrolled(true);
      } else {
        setScrolled(false);
      }
    };

    window.addEventListener("scroll", handleScroll);
    return () => {
      window.removeEventListener("scroll", handleScroll);
    };
  }, []);
  useEffect(() => {
    // Add an event listener to disable scrolling when the mobile menu is open
    if (togglemobile) {
      document.body.style.overflow = "hidden";
    } else {
      document.body.style.overflow = "auto";
    }
  }, [togglemobile]);

  // function handleToggle(e) {
  //   if (e.target.checked) {
  //     setTheme("mytheme");
  //   } else {
  //     setTheme("light");
  //   }
  // }

  return (
    <nav
      className={` w-full ${
        scrolled ? "bg-accent z-20 shadow-md " : ""
      } flex  lg:px-[7rem] justify-between  items-center navbar fixed text-white right-0 left-0 top-0 z-10 transition-all delay-300  ease-in-out  `}
    >
      <Link to="/">
        <img
          className="w-[124px] h-[35px]"
          src={`${
            theme === "light"
              ? "https://hoostly.com/wp-content/uploads/2023/03/Hoostly.svg"
              : LogoDark
          }`}
          alt="hoostly"
        />
      </Link>
      <label className=" lg:hidden swap swap-rotate mt-1 text-secondary mx-2">
        {/* this hidden checkbox controls the state */}
        <input
          type="checkbox"
          className="theme-controller"
          onChange={(e) => handleToggle(e)}
          checked={theme === "light" ? false : true}
        />

        {/* sun icon */}
        <svg
          className="swap-on fill-current w-6 h-6"
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 24 24"
        >
          <path d="M5.64,17l-.71.71a1,1,0,0,0,0,1.41,1,1,0,0,0,1.41,0l.71-.71A1,1,0,0,0,5.64,17ZM5,12a1,1,0,0,0-1-1H3a1,1,0,0,0,0,2H4A1,1,0,0,0,5,12Zm7-7a1,1,0,0,0,1-1V3a1,1,0,0,0-2,0V4A1,1,0,0,0,12,5ZM5.64,7.05a1,1,0,0,0,.7.29,1,1,0,0,0,.71-.29,1,1,0,0,0,0-1.41l-.71-.71A1,1,0,0,0,4.93,6.34Zm12,.29a1,1,0,0,0,.7-.29l.71-.71a1,1,0,1,0-1.41-1.41L17,5.64a1,1,0,0,0,0,1.41A1,1,0,0,0,17.66,7.34ZM21,11H20a1,1,0,0,0,0,2h1a1,1,0,0,0,0-2Zm-9,8a1,1,0,0,0-1,1v1a1,1,0,0,0,2,0V20A1,1,0,0,0,12,19ZM18.36,17A1,1,0,0,0,17,18.36l.71.71a1,1,0,0,0,1.41,0,1,1,0,0,0,0-1.41ZM12,6.5A5.5,5.5,0,1,0,17.5,12,5.51,5.51,0,0,0,12,6.5Zm0,9A3.5,3.5,0,1,1,15.5,12,3.5,3.5,0,0,1,12,15.5Z" />
        </svg>

        {/* moon icon */}
        <svg
          className="swap-off fill-current w-6 h-6"
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 24 24"
        >
          <path d="M21.64,13a1,1,0,0,0-1.05-.14,8.05,8.05,0,0,1-3.37.73A8.15,8.15,0,0,1,9.08,5.49a8.59,8.59,0,0,1,.25-2A1,1,0,0,0,8,2.36,10.14,10.14,0,1,0,22,14.05,1,1,0,0,0,21.64,13Zm-9.5,6.69A8.14,8.14,0,0,1,7.08,5.22v.27A10.15,10.15,0,0,0,17.22,15.63a9.79,9.79,0,0,0,2.1-.22A8.11,8.11,0,0,1,12.14,19.73Z" />
        </svg>
      </label>

      <ul className="list-none hidden md:hidden justify-end items-center lg:flex mx-3 ">
        {navLinks.map((nav, index) => (
          <li
            key={nav.id}
            className={`font-poppins font-normal cursor-pointer text-[16px] py-5 group ${
              index === navLinks.length - 1 ? "mr-0" : "mr-10"
            } ${navId === nav.id ? "active" : ""} `}
            onClick={() => handleClick(nav.id)}
          >
            <Link to={nav.link}>
              <a className={`font-normal flex items-center text-secondary `}>
                {nav.title}
                {/* {navId === nav.id ? (
                  <img src={arrowUp} className="mx-1 text-white" />
                ) : (
                  <img src={arrowDown} className="mx-1" />
                )} */}
              </a>
              {nav.submenu && nav.id === navId && (
                <div className="mt-[150px]">
                  <SubMenu id={nav.id} />
                </div>
              )}
            </Link>
          </li>
        ))}
      </ul>

      <div className="hidden  sm:flex  ">
        <div className="flex flex-col items-center">
          <span className="flex text-xl font-bold text-secondary">
            <FiPhone className="w-6 h-[22px] mr-2 mt-1 " />
            <span className="text-info"> 984-390-6380</span>

            <img src={nepalflag} className="ml-2 mt-1" />
          </span>
          <span className="text-xs ml-2 -m-[0.2rem] text-secondary">
            (10 am to 5pm support)
          </span>
        </div>

        <label className="swap swap-rotate mt-1 text-secondary mx-2">
          {/* this hidden checkbox controls the state */}
          <input
            type="checkbox"
            className="theme-controller"
            onChange={(e) => handleToggle(e)}
            checked={theme === "light" ? false : true}
          />

          {/* sun icon */}
          <svg
            className="swap-on fill-current w-6 h-6"
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 24 24"
          >
            <path d="M5.64,17l-.71.71a1,1,0,0,0,0,1.41,1,1,0,0,0,1.41,0l.71-.71A1,1,0,0,0,5.64,17ZM5,12a1,1,0,0,0-1-1H3a1,1,0,0,0,0,2H4A1,1,0,0,0,5,12Zm7-7a1,1,0,0,0,1-1V3a1,1,0,0,0-2,0V4A1,1,0,0,0,12,5ZM5.64,7.05a1,1,0,0,0,.7.29,1,1,0,0,0,.71-.29,1,1,0,0,0,0-1.41l-.71-.71A1,1,0,0,0,4.93,6.34Zm12,.29a1,1,0,0,0,.7-.29l.71-.71a1,1,0,1,0-1.41-1.41L17,5.64a1,1,0,0,0,0,1.41A1,1,0,0,0,17.66,7.34ZM21,11H20a1,1,0,0,0,0,2h1a1,1,0,0,0,0-2Zm-9,8a1,1,0,0,0-1,1v1a1,1,0,0,0,2,0V20A1,1,0,0,0,12,19ZM18.36,17A1,1,0,0,0,17,18.36l.71.71a1,1,0,0,0,1.41,0,1,1,0,0,0,0-1.41ZM12,6.5A5.5,5.5,0,1,0,17.5,12,5.51,5.51,0,0,0,12,6.5Zm0,9A3.5,3.5,0,1,1,15.5,12,3.5,3.5,0,0,1,12,15.5Z" />
          </svg>

          {/* moon icon */}
          <svg
            className="swap-off fill-current w-6 h-6"
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 24 24"
          >
            <path d="M21.64,13a1,1,0,0,0-1.05-.14,8.05,8.05,0,0,1-3.37.73A8.15,8.15,0,0,1,9.08,5.49a8.59,8.59,0,0,1,.25-2A1,1,0,0,0,8,2.36,10.14,10.14,0,1,0,22,14.05,1,1,0,0,0,21.64,13Zm-9.5,6.69A8.14,8.14,0,0,1,7.08,5.22v.27A10.15,10.15,0,0,0,17.22,15.63a9.79,9.79,0,0,0,2.1-.22A8.11,8.11,0,0,1,12.14,19.73Z" />
          </svg>
        </label>
        <button className="text-secondary mx-4 text-[14px] font-medium rounded-xl p-3.5 border tracking-wide">
          Client Area
        </button>
      </div>

      <div className="sm:hidden flex flex-1 justify-end items-center">
        <a className="mx-1 text-[28px] text-secondary">
          <IoCallOutline />
        </a>

        <div className="mr-4">
          <button className="text-secondary mx-4 text-[12px] font-medium rounded-xl p-2 py-3 border tracking-wide">
            Client Area
          </button>
        </div>
        <CiMenuFries
          onClick={() => settogglemobile((prev) => !prev)}
          className="w-[28px] h-[28px] object-contain text-secondary"
        />
      </div>

      <div
        className={`${
          togglemobile ? "block" : "hidden"
        } p-2 scroll-pb-12  absolute top-0 left-0  w-full sidebar bg-accent  z-[10] `}
      >
        <div
          className="text-[35px] cursor-pointer flex items-center"
          onClick={() => settogglemobile((prev) => !prev)}
        >
          <IoClose className="text-secondary" />
        </div>

        <ul className="list-none  pb-[200px] overflow-y-auto h-screen py-12">
          {navLinks.map((nav, index) => (
            <li
              key={nav.id}
              className=" font-normal w-full cursor-pointer text-[22px] text-secondary p-2"
              onClick={nav.submenu ? null : () => settogglemobile(false)}
            >
              <a
                href={`#${nav.id}`}
                className={`font-light flex justify-between items-center  p-4 `}
                onClick={() =>
                  navId !== nav.id ? setNavId(nav.id) : setNavId("")
                }
              >
                <span>{nav.title} </span>
                {nav.submenu && navId === nav.id ? (
                  <FaArrowDownLong />
                ) : (
                  <FaArrowRightLong />
                )}
              </a>
              {nav.submenu && navId === nav.id ? (
                <SubMenu id={nav.id} settogglemobile={settogglemobile} />
              ) : (
                ""
              )}
            </li>
          ))}
        </ul>
      </div>
    </nav>
  );
};

export default header;
